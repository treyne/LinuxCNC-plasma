--************************************************
--*** Set these values up to suit your machine ***
--************************************************

--this is the distance between each torch reference in MILLIMETRES
refDistance = 1

--this is the reference feed rate in mm/min
refFeed = 500

--Put your switch offset value here in MILLIMETRES
switchOffset = 2.5

--Scriber X,Y,Z offsets in MILLIMETRES. Do not use inches here even if you want inch code
--Use the special code 'nil' on the Z axis to disable it.
--In that case no Z values will be output at all while scribing.
--e.g scriberZ = nil
scriberX = 0
scriberY = 0
scriberZ = 5

--scriber axis.
--scriberAxis = "B"
scriberAxis = "Z"

--If this value is set to true then use G28 (home) for the Z reference
--Set it to false for G31 probe
refHome = false

--rotary axis. Normally this would be "A"
rotaryAxis = "A"

--Number of units for one full revolution of the rotary axis
unitsPerRev=360


-- Rapids will move the shortest distance to the next cut but may cause machines with limited rotation
-- to 'wind up'. Set this to 0 to disable optimisation.
--defaults to 1 if not defined
optimiseRapids = 1


maxRotation = 6

--************************************************
--***           End of settings                ***
--************************************************



function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Post for rotary-plasma plugin and LinuxCNC PlasmaC\n")
   ctrl:AppendText("OOO RusAgro\n")
   ctrl:AppendText("Author: Ilya Shapovalov\n")
   ctrl:AppendText("Telegramm: @Magic0Sparrow\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Post variables:\n")
   ctrl:AppendText("refDistance - set the distance between each reference\n")
   ctrl:AppendText("G04 - set the feed rate when referencing\n")
   ctrl:AppendText("switchOffset - set your net switch offset amount \n")
   ctrl:AppendText("Scriber uses any tool number\n")
end



--   created 1/1/06
--   Based on plasma1.post


--  Modified 21/6/2010
--  added option for 'nil' plate marker z
--  Added support for plate marker tool type as well as tool number based plate marker

-- Modified 4/11/2010
-- Added: Reference the torch on the first pen down if the plate marker is the first tool used.


post.DefineVariable("refDistance",sc.unitLINEAR,0,1e17)
post.DefineVariable("refFeed",sc.unitFEED,0,1e17)
post.DefineVariable("switchOffset",sc.unitLINEAR,-1e17,1e17)

function OnInit()

   offX = 0
   offY = 0
   offZ = 0
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text (" (Filename: ", fileName, ")\n")
   post.Text (" (Post processor: ", postName, ")\n")
   post.Text (" (Date: ", date, ")\n")
   if(scale == metric) then
      post.Text (" G21 (Units: Metric)\n") --metric mode
   else
      post.Text (" G20 (Units: Inches)\n") --inch mode
   end
   post.Text (" G90 G40\n M52 P1 (adaptive feed: on)\n M65 P2 (enable THC)\n M65 P3 (enable torch)\n M68 E3 Q0 (velocity 100%)\n G64 P0.254 Q0.025 (tracking tolerances: 0.254mm)\n")
   post.Text (" \n M67 E3 Q100\n T0 M6 (select plasma tool)\n G43 H0 (apply tool offsets)\n F#<_hal[plasmac.cut-feed-rate]>\n")
   minArcSize = 0.2 --arcs smaller than this are converted to moves
   firstRef = true
   currentZAxis = "Z"

   dist = 9999999
   lastz = 0
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   endZ = safeZ
   OnRapid()
   endX = 0
   endY = 0
   offX = 0
   offY = 0
   offZ = 0
   OnRapid()
   --post.ModalText(" G92 A0\n")
   post.Text (" M5 $0 \n M30\n")
end

function OnRapid()
   local len = math.hypot((endX + offX)-currentX , (endY + offY)-currentY)
   dist = dist + len
   post.ModalText (" G00")
   post.ModalNumber (" U", (endX + offX) * scale, "0.0000")
   --post.ModalNumber (" Y", (endY + offY) * scale, "0.0000")
   if(endZ ~= pierceHeight) then
      --post.ModalNumber (" " .. currentZAxis, (endZ + offZ) * scale, "0.0000")
   end
   post.ModalNumber (" " .. rotaryAxis, endA, "0.0000")
   post.Eol()
end

function OnMove()
   local len = math.hypot(endX - currentX , endY - currentY)
   dist = dist + len
   post.ModalText (" G01")
   post.ModalNumber (" U", (endX + offX) * scale, "0.0000")
   --post.ModalNumber (" Y", (endY + offY) * scale, "0.0000")
   --post.ModalNumber (" " .. currentZAxis, (endZ + offZ) * scale, "0.0000")
   post.ModalNumber (" " .. rotaryAxis, endA, "0.0000")
   --post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnArc()
   local radius = math.hypot(currentX - arcCentreX, currentY - arcCentreY)
   dist = dist + radius * math.abs(arcAngle)
   if(arcAngle <0) then
      post.ModalText (" G03")
   else
      post.ModalText (" G02")
   end
   post.ModalNumber (" U", (endX + offX) * scale, "0.0000")
   post.ModalNumber (" Y", (endY + offY) * scale, "0.0000")
   if(offZ) then
      --post.ModalNumber (" " .. currentZAxis, (endZ + offZ) * scale, "0.0000")
   end
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0000")
   post.ModalNumber (" " .. rotaryAxis, endA, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end


function OnPenDown()
   sc.QueryDll(qryRAPIDY, endY, dllId)
--   local matZ = sc.QueryDll(qryGETZ, 0, dllId)
   local matZ = sc.QueryDll(qryCHKEND, endY, dllId)
   if(toolClass == "MarkerTool") or tool > 99 then
      if (firstRef) then
         Reference()
         --post.ModalText (" G00")
         --post.Text(" Z")
         --local clearZ = sc.QueryDll(qryGETSAFEZ, 0, dllId)
         --post.Number ((clearZ + safeZ)  * scale, "0.0000")
         post.Eol()
         offX = scriberX
         offY = scriberY
         --offZ = scriberZ
         if(offZ > 0) then
            --post.ModalNumber (" " .. currentZAxis, (rotaryVals.cz + offZ)  * scale, "0.0000")
            --post.Eol()
         end
         post.ModalNumber (" U", (rotaryVals.cx + offX) * scale, "0.0000")
         post.ModalNumber (" Y", (rotaryVals.cy + offY) * scale, "0.0000")
         post.Eol()
      end
      if (offZ) then
         --post.ModalNumber (" " .. currentZAxis, (rotaryVals.cz + offZ)  * scale, "0.0000")
         --post.Eol()
      end
      post.Text(" M08\n")
   else
      if(dist >= refDistance) then
         dist = 0
         Reference();
      end
      --post.ModalText (" G00")
      --post.Text(" Z")
      --post.Number ((matZ + pierceHeight)  * scale, "0.0000")
      post.Eol()
      if (preheat > 0) then
         post.Text ("\n G04 P")
         post.Number (preheat,"0.###")
         post.Eol()
      end
      post.Text ("\n M3 $0 S1\n")
   end
   if (pierceDelay > 0) then
      post.Text (" G04 P")
      post.Number (pierceDelay,"0.###")
      post.Eol()
   end
end


function Reference()
   firstRef = false
   local matZ = sc.QueryDll(qryCHKEND, endY, dllId)
   if (refHome) then
      post.ModalText(" G28.1 Z")
      post.Number((3 + matZ) * scale, "0.00")
   else
      --post.ModalText(" G31 Z-100")
   end
   --post.ModalNumber (" F", refFeed * scale, "0.0###")
   post.Eol()
   --post.ModalText(" G92 Z")
   --post.Number ((matZ - switchOffset) * scale, "0.0000")
   post.Eol()
end

function OnPenUp()
   if(tool > 99) then
      post.Text(" M09\n")
   else
      post.Text (" M5 $0\n")
   end
   if (endDelay > 0) then
      post.Text (" G04 P")
      post.Number (endDelay,"0.###")
      post.Eol()
   end
end


function OnNewOperation()
   post.Text (" (Operation: ", operationName, ")\n")
end

function OnToolChange()
--post.Text(">  " .. endX .. " " .. endY .. " " .. endZ .. "\n")
    if (toolClass == "MarkerTool"  or tool > 99 ) then
         if(scriberAxis and scriberAxis ~= currentZAxis) then
            --endZ = safeZ
            --OnRapid()
            --currentZAxis = scriberAxis
         end
         if(firstRef ~= true) then
            offX = scriberX
            offY = scriberY
            --offZ = scriberZ
         end
    else
         if(scriberAxis and scriberAxis == currentZAxis) then
            --endZ = safeZ
            --OnRapid()
            --currentZAxis = "Z"
         end
         offX = 0
         offY = 0
         offZ = 0
    end
end

function OnNewPart()
   post.Text(" (Part: ",partName,")\n");
end

function OnDrill()
   OnRapid()
   OnPenDown()
   endZ = drillZ
   OnMove()
   OnPenUp()
   --endZ = safeZ
   OnRapid()
end

ignorePierceHeightMove = true
package.path = sc.Globals:Get().thisDir .. "/plugins/RotaryPlasma/?.lua"
require("rotaryhelper")
